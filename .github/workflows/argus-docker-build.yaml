name: Docker Image Build

on:
  workflow_call:
    inputs:
      envs:
        description: The envs that this is building (rdev, staging, or prod), comma delimited
        required: true
        type: string
      images:
        description: 'JSON array of images to build (required keys: dockerfile, context, name, platform)'
        required: true
        type: string
      path_filters:
        description: 'Glob patterns to match against changed files in the repository, comma delimited'
        required: false
        type: string
        default: '**/*'
      path_filters_base:
        description: |
          Git reference (e.g. branch name) against which the changes will be detected. Defaults to the current branch.
          If it references same branch it was pushed to, changes are detected against the most recent commit before the push.
          This option is ignored if action is triggered by pull_request event.
        required: false
        type: string
        default: ${{ github.ref }}
      branches:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: '*'
      branches_ignore:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: ''
      working_directory:
        description: 'The Argus project root (parent directory that contains the .infra/ directory)'
        required: false
        type: string
        default: '.'

jobs:
  prep:
    name: Prep for Build
    runs-on: [ARM64,self-hosted,Linux]
    if: contains(github.event.head_commit.message, '[no-deploy]') == false
    outputs:
      image_tag: ${{ steps.build_prep.outputs.image_tag }}
      should_build: ${{ steps.build_prep.outputs.should_build }}
      images: ${{ steps.parse_images.outputs.images }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/build-prep@c210eb8dba1aeb3ccf02186ad89c3c85f6fc4da7
        id: build_prep
        with:
          path_filters: ${{ inputs.path_filters }}
          path_filters_base: ${{ inputs.path_filters_base }}
          branches: ${{ inputs.branches }}
          branches_ignore: ${{ inputs.branches_ignore }}
      - name: Parse inputs
        id: parse_images
        uses: actions/github-script@v7
        with:
          script: |
            const images = JSON.parse(`${{ inputs.images }}`);
            images.forEach(image => {
              const buildArgs = image.build_args || [];
              image.build_args = buildArgs.join("\n");

              const secretFiles = image.secret_files || [];
              image.secret_files = secretFiles.join("\n");
            });
            core.info(`Images to build: ${JSON.stringify(images, null, 2)}`);
            core.setOutput('images', images);

  build-docker:
    name: Build Docker Image
    needs: [prep]
    runs-on: 
      - self-hosted
      - Linux
      - ${{ matrix.image.platform == 'linux/amd64' && 'X64' || 'ARM64' }}
    if: needs.prep.outputs.should_build == 'true' && needs.prep.outputs.images != '[]'
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prep.outputs.images) }}
    steps:
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/docker-build@6bedec40fc9ec91a8ea6e89800d249b02678fbbf
        with:
          image_name: ${{ matrix.image.name }}
          dockerfile: ${{ matrix.image.dockerfile }}
          context: ${{ matrix.image.context }}
          platform: ${{ matrix.image.platform }}
          build_args: ${{ matrix.image.build_args }}
          secret_files: ${{ matrix.image.secret_files }}
          image_tag: ${{ needs.prep.outputs.image_tag }}
          github_app_id: ${{ secrets.CZI_GITHUB_HELPER_APP_ID }}
          github_private_key: ${{ secrets.CZI_GITHUB_HELPER_PK }}
          working_directory: ${{ inputs.working_directory }}

  update-manifests:
    name: Update ArgoCD manifests
    needs: [prep, build-docker]
    runs-on: [ARM64,self-hosted,Linux]
    permissions:
      id-token: write
      contents: read
    if: always() && needs.prep.outputs.should_build == 'true' && needs.prep.outputs.images != '[]'
    steps:
      - name: Check build status
        uses: actions/github-script@v7
        with:
          script: |
            if (${{ !contains(needs.build-docker.result, 'success') }}) {
              core.setFailed("We won't update the manifest because one or more Docker builds did not succeed");
            } else {
              core.info('All builds passed, continuing with manifest update...');
            }

      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/manifest-update@c210eb8dba1aeb3ccf02186ad89c3c85f6fc4da7
        with:
          envs: ${{ inputs.envs }}
          image_tag: ${{ needs.prep.outputs.image_tag }}
          working_directory: ${{ inputs.working_directory }}
          github_app_id: ${{ secrets.CZI_GITHUB_HELPER_APP_ID }}
          github_private_key: ${{ secrets.CZI_GITHUB_HELPER_PK }}
