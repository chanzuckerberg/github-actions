name: Docker Image Build

on:
  workflow_call:
    inputs:
      envs:
        description: The envs that this is building (rdev, staging, or prod), comma delimited
        required: true
        type: string
      images:
        description: 'JSON object specifying the images to build'
        required: true
        type: string
      path_filters:
        description: 'Glob patterns to match against changed files in the repository, comma delimited'
        required: false
        type: string
        default: '**/*'
      branches_include:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: '*'
      branches_ignore:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: ''
      force_update_manifests:
        description: 'Whether to always update ArgoCD manifests after building the Docker images, regardless of which labels are present on the PR'
        required: false
        type: boolean
        default: false
      fail_on_vulnerabilities:
        description: 'whether to fail the action if vulnerabilities are found'
        required: false
        type: boolean
        default: true
      arm_runner_labels:
        description: 'Runner label to use for steps that use an arm-based action runner'
        required: false
        type: string
        default: "['arm64-privileged']"
      amd_runner_labels:
        description: 'Runner label to use for steps that use an amd64-based action runner'
        required: false
        type: string
        default: "['amd64-privileged']"
      manifest_trigger_labels:
        description: |
          Labels that will trigger updating the manifest and committing a docker image change to values.yaml, comma delimited, supports wildcards (*).
          If ANY of the labels are found on the PR, the manifest will be updated.
        required: false
        type: string
        default: 'stack,stack-*'
      enable_vuln_container_scan:
        description: Opt in to scan containers with AWS inspector
        required: false
        type: boolean
        default: false

    outputs:
      image_tag:
        description: "Image tag"
        value: ${{ jobs.prep.outputs.image_tag }}
      should_build:
        description: "Should build image"
        value: ${{ jobs.prep.outputs.should_build }}

jobs:
  prep:
    name: Prep for Build
    runs-on: ${{ fromJSON(inputs.arm_runner_labels) }}
    if: contains(github.event.head_commit.message, '[no-deploy]') == false
    outputs:
      image_tag: ${{ steps.build_prep.outputs.image_tag }}
      should_build: ${{ steps.build_prep.outputs.should_build }}
      should_deploy: ${{ steps.build_prep.outputs.should_deploy }}
      images: ${{ steps.build_prep.outputs.images }}
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/build-prep@v6
        id: build_prep
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ inputs.images }}
          path_filters: ${{ inputs.path_filters }}
          branches_include: ${{ inputs.branches_include }}
          branches_ignore: ${{ inputs.branches_ignore }}
          manifest_trigger_labels: ${{ inputs.manifest_trigger_labels }}
          force_update_manifests: ${{ inputs.force_update_manifests }}

  build-docker:
    name: Build Docker Image
    needs: [prep]
    runs-on: ${{ matrix.image.platform == 'linux/amd64' && fromJSON(inputs.amd_runner_labels) || fromJSON(inputs.arm_runner_labels) }}
    if: needs.prep.outputs.should_build == 'true'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prep.outputs.images) }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Log image config
        id: log_image
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`Image to build: ${{ toJson(matrix.image) }}`);
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/docker-build@v6
        if: matrix.image.should_build == true
        with:
          image_name: ${{ matrix.image.name }}
          dockerfile: ${{ matrix.image.dockerfile }}
          context: ${{ matrix.image.context }}
          platform: ${{ matrix.image.platform }}
          build_args: ${{ matrix.image.build_args }}
          secret_files: ${{ matrix.image.secret_files }}
          image_tag: |
            ${{ needs.prep.outputs.image_tag }}
            production
          github_app_id: ${{ secrets.GH_ACTIONS_HELPER_APP_ID }}
          github_private_key: ${{ secrets.GH_ACTIONS_HELPER_PK }}
          fail_on_vulnerabilities: ${{ inputs.fail_on_vulnerabilities }}
          enable_vuln_container_scan: ${{ inputs.enable_vuln_container_scan }}

  update-manifests:
    name: Update ArgoCD manifests
    needs: [prep, build-docker]
    runs-on: ${{ fromJSON(inputs.arm_runner_labels) }}
    permissions:
      id-token: write
      contents: read
    if: always()
    steps:
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/manifest-update@v6
        with:
          should_deploy: ${{ needs.prep.outputs.should_deploy }}
          images: ${{ needs.prep.outputs.images }}
          image_tag: ${{ needs.prep.outputs.image_tag }}
          build_results: ${{ needs.build-docker.result }}
          envs: ${{ inputs.envs }}
          github_app_id: ${{ secrets.GH_ACTIONS_HELPER_APP_ID }}
          github_private_key: ${{ secrets.GH_ACTIONS_HELPER_PK }}
