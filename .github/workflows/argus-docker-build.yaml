name: Docker Image Build

on:
  workflow_call:
    inputs:
      envs:
        description: The envs that this is building (rdev, staging, or prod), comma delimited
        required: true
        type: string
      images:
        description: 'JSON object specifying the images to build'
        required: true
        type: string
      path_filters:
        description: 'Glob patterns to match against changed files in the repository, comma delimited'
        required: false
        type: string
        default: '**/*'
      path_filters_base:
        description: |
          Git reference (e.g. branch name) against which the changes will be detected. Defaults to the current branch.
          If it references same branch it was pushed to, changes are detected against the most recent commit before the push.
          This option is ignored if action is triggered by pull_request event.
        required: false
        type: string
        default: ${{ github.ref }}
      branches_include:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: '*'
      branches_ignore:
        description: 'Branch names to run this job on, supports wildcards, comma delimited'
        required: false
        type: string
        default: ''
      update_manifests:
        description: 'Whether to update ArgoCD manifests after building the Docker images'
        required: false
        type: boolean
        default: true
      force_update_manifests:
        description: 'Whether to always update ArgoCD manifests after building the Docker images'
        required: false
        type: boolean
        default: false
      fail_on_vulnerabilities:
        description: 'whether to fail the action if vulnerabilities are found'
        required: false
        type: boolean
        default: true
      arm_runner_labels:
        description: 'Runner label to use for steps that use an arm-based action runner'
        required: false
        type: string
        default: "['ARM64']"
      x64_runner_labels:
        description: 'Runner label to use for steps that use an x64-based action runner'
        required: false
        type: string
        default: "['X64']"
      manifest_trigger_labels:
        description: |
          Labels that will trigger updating the manifest and committing a docker image change to values.yaml, comma delimited.
          If ANY of the labels are found on the PR, the manifest will be updated.
        required: false
        type: string
        default: 'stack'

jobs:
  prep:
    name: Prep for Build
    runs-on: ${{ fromJSON(inputs.arm_runner_labels) }}
    if: contains(github.event.head_commit.message, '[no-deploy]') == false
    outputs:
      image_tag: ${{ steps.build_prep.outputs.image_tag }}
      should_build: ${{ steps.build_prep.outputs.should_build }}
      should_deploy: ${{ steps.build_prep.outputs.should_deploy }}
      images: ${{ steps.parse_images.outputs.images }}
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/build-prep@78daec2e0e6b6eb3913cc009cdb2a1d251a6f2db
        id: build_prep
        with:
          path_filters: ${{ inputs.path_filters }}
          path_filters_base: ${{ inputs.path_filters_base }}
          branches_include: ${{ inputs.branches_include }}
          branches_ignore: ${{ inputs.branches_ignore }}
          manifest_trigger_labels: ${{ inputs.manifest_trigger_labels }}
      - uses: actions/checkout@v4
      - uses: chanzuckerberg/github-actions/.github/actions/validate-json-schema@v5.1.0
        name: Validate images input
        with:
          schema: |
            {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "context": { "type": "string" },
                  "dockerfile": { "type": "string" },
                  "platform": { "type": "string" },
                  "build_args": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "secret_files": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "argus_root": { "type": "string" },
                  "path_filters": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        { "type": "string" },
                        { "type": "array", "items": { "type": "string" } }
                      ]
                    }
                  },
                  "branches_include": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "branches_ignore": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "skip_manifest_update": { "type": "boolean" }
                },
                "required": ["context", "dockerfile"]
              }
            }
          data: ${{ inputs.images }}

      - uses: tj-actions/changed-files@v45
        id: changed_files
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install yaml minimatch
      - name: Parse inputs
        id: parse_images
        uses: actions/github-script@v7
        with:
          script: |
            const YAML = require('yaml');
            const { minimatch } = require('minimatch');
            function wildcardMatch(text, pattern) {
              const regexPattern =
              new RegExp('^' + pattern.replace(/\?/g, '.').replace(/\*/g, '.*') + '$');
              return regexPattern.test(text);
            }

            const currentBranch = `${{ github.ref }}`.replace('refs/heads/', '');
            const changedFiles = `${{ steps.changed_files.outputs.all_modified_files }}`.split(' ');
            console.log('Changed files:', changedFiles);

            const images = JSON.parse(`${{ inputs.images }}`);
            const processedImages = Object.entries(images).map(([name, image]) => {
              image.name = name;

              const buildArgs = image.build_args || [];
              image.build_args = buildArgs.join("\n");

              const secretFiles = image.secret_files || [];
              image.secret_files = secretFiles.join("\n");

              const argusRoot = image.argus_root || '.';
              image.argus_root = argusRoot;

              const pathFilters = (image.path_filters || ['**/*']).map(f => Array.isArray(f) ? f : [f]);

              console.log('---\nLooking for file changes that match the filters for image:', name);
              const filesMatched = changedFiles.filter(file => {
                console.log('Checking file:', file);
                return pathFilters.some(filters => {
                  console.log('- checking filters:', filters);
                  const matchedFile = filters.every(filter => minimatch(file, filter, { dot: true }));
                  console.log(`- matched file ${file} with filters ${filters}?`, matchedFile);
                  return matchedFile;
                });
              });
              console.log('Files matched:', filesMatched);
              image.files_matched = filesMatched.length > 0;

              const branchesInclude = (image.branches_include || ['*']).map(b => b.trim()).filter(b => b.length > 0);
              const branchesIgnore = (image.branches_ignore || []).map(b => b.trim()).filter(b => b.length > 0);
              console.log('branches include:', branchesInclude);
              console.log('branches ignore:', branchesIgnore);
              console.log('current branch:', currentBranch);

              const branchMatched = branchesInclude.some(b => wildcardMatch(currentBranch, b)) && !branchesIgnore.some(b => wildcardMatch(currentBranch, b));
              image.branch_matched = branchMatched;

              image.should_build = image.files_matched && image.branch_matched;

              return image;
            });
            core.info(`Images configuration: ${JSON.stringify(processedImages, null, 2)}`);
            core.setOutput('images', processedImages);

  build-docker:
    name: Build Docker Image
    needs: [prep]
    runs-on: ${{ matrix.image.platform == 'linux/amd64' && fromJSON(inputs.x64_runner_labels) || fromJSON(inputs.arm_runner_labels) }}
    if: needs.prep.outputs.should_build == 'true' && needs.prep.outputs.images != '[]'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prep.outputs.images) }}
    steps:
      - uses: actions/checkout@v4
      - name: Log image config
        id: log_image
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`Image to build: ${{ toJson(matrix.image) }}`);
      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/docker-build@193e90c0872c379105b55b1d02cf55e9992f6f16
        if: matrix.image.should_build == true
        with:
          image_name: ${{ matrix.image.name }}
          dockerfile: ${{ matrix.image.dockerfile }}
          context: ${{ matrix.image.context }}
          platform: ${{ matrix.image.platform }}
          build_args: ${{ matrix.image.build_args }}
          secret_files: ${{ matrix.image.secret_files }}
          image_tag: ${{ needs.prep.outputs.image_tag }}
          github_app_id: ${{ secrets.GH_ACTIONS_HELPER_APP_ID }}
          github_private_key: ${{ secrets.GH_ACTIONS_HELPER_PK }}
          fail_on_vulnerabilities: ${{ inputs.fail_on_vulnerabilities }}

  update-manifests:
    name: Update ArgoCD manifests
    needs: [prep, build-docker]
    runs-on: ${{ fromJSON(inputs.arm_runner_labels) }}
    permissions:
      id-token: write
      contents: read
    if: always() && needs.prep.outputs.should_build == 'true' && (inputs.force_update_manifests || inputs.update_manifests && needs.prep.outputs.should_deploy == 'true' && needs.prep.outputs.images != '[]')
    steps:
      - name: Check build status
        uses: actions/github-script@v7
        with:
          script: |
            if (${{ !contains(needs.build-docker.result, 'success') }}) {
              core.setFailed("We won't update the manifest because one or more Docker builds did not succeed");
            } else {
              core.info('All builds passed, continuing with manifest update...');
            }

      - name: Determine manifests to update
        uses: actions/github-script@v7
        id: determine_manifests
        with:
          result-encoding: string
          script: |
            const images = ${{ needs.prep.outputs.images }};
            const argusRootDirs = images.filter(image => image.should_build && !image.skip_manifest_update).map(image => image.argus_root);
            console.log('Argus root dirs:', argusRootDirs);
            return argusRootDirs.join(',');

      - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/manifest-update@7ca76d58a02ef0d0d20984c1012dc64ef3c9fa08
        if: steps.determine_manifests.outputs.result != ''
        with:
          envs: ${{ inputs.envs }}
          image_tag: ${{ needs.prep.outputs.image_tag }}
          argus_project_dirs: ${{ steps.determine_manifests.outputs.result }}
          github_app_id: ${{ secrets.GH_ACTIONS_HELPER_APP_ID }}
          github_private_key: ${{ secrets.GH_ACTIONS_HELPER_PK }}
