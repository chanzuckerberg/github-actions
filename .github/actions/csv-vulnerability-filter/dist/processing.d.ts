import { CsvRow, FilterResult } from './types';
/**
 * Reads and parses a CSV file.
 * @param filePath Path to the CSV file.
 * @param requiredColumns Array of column names expected to exist.
 * @returns Array of row objects.
 */
export declare function parseCsv(filePath: string, requiredColumns: string[]): CsvRow[];
/**
 * Filters primary data against comparison data.
 * @param primaryData Parsed data from the primary CSV.
 * @param comparisonData Parsed data from the comparison CSV.
 * @param cveColumn Name of the CVE column.
 * @param packageColumn Name of the package column.
 * @returns An object containing arrays of filtered and removed rows.
 */
export declare function filterAndSeparate(primaryData: CsvRow[], comparisonData: CsvRow[], cveColumn: string, packageColumn: string): FilterResult;
/**
 * Generates a CSV string from an array of row objects.
 * @param data Array of row objects.
 * @returns CSV formatted string.
 */
export declare function generateCsvString(data: CsvRow[]): string;
/**
 * Generates a simple Markdown summary.
 * @param data Array of row objects to summarize.
 * @param title Title for the Markdown section.
 * @param cveColumn Name of the CVE column for display.
 * @param packageColumn Name of the package column for display.
 * @param severityColumn Optional: Name of severity column for display.
 * @returns Markdown formatted string.
 */
export declare function generateMarkdown(data: CsvRow[], title: string, cveColumn: string, packageColumn: string, severityColumn?: string): string;
/**
 * Writes data to a CSV file in the runner's temp directory.
 * @param csvString The CSV content to write.
 * @param baseFilename Suggested base filename (e.g., 'filtered_results').
 * @returns The full path to the written file.
 */
export declare function writeOutputCsv(csvString: string, baseFilename: string): string;
