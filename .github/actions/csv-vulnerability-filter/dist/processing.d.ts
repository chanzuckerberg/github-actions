import { CsvRow, FilterResult, SeverityCounts, Thresholds } from './types';
/**
 * Reads and parses a CSV file, validating required columns.
 * @param filePath Path to the CSV file.
 * @param requiredColumns Array of column names expected to exist.
 * @returns Array of row objects.
 * @throws Error if file not found or required column is missing.
 */
export declare function parseCsv(filePath: string, requiredColumns: string[]): CsvRow[];
/**
 * Filters primary data against comparison data using assumed fixed column names.
 */
export declare function filterAndSeparate(primaryData: CsvRow[], comparisonData: CsvRow[]): FilterResult;
/**
 * Calculates severity counts using the assumed 'severity' column.
 */
export declare function calculateSeverityCounts(data: CsvRow[]): SeverityCounts;
/**
 * Checks if calculated counts exceed the defined thresholds.
 */
export declare function checkCountThresholds(counts: SeverityCounts, thresholds: Thresholds): boolean;
/**
 * Checks if the value in the assumed 'fixed_ver' column indicates a fix is available.
 * Returns true if a seemingly valid fix version is present, false otherwise.
 */
export declare function isFixedVersionPresent(row: CsvRow): boolean;
/**
 * Generates a CSV string from an array of row objects.
 */
export declare function generateCsvString(data: CsvRow[]): string;
/**
 * Writes data to a CSV file in the runner's temp directory.
 */
export declare function writeOutputCsv(csvString: string, baseFilename: string): string;
declare function cleanCell(value: string | undefined | null, defaultValue?: string): string;
declare function formatPurl(pkgName: string | undefined | null, pkgVersion: string | undefined | null): string;
/**
 * Generates a detailed Markdown vulnerability table assuming fixed column names,
 * matching the format from the create_vulnerability_details_table Python function.
 * @param data The array of vulnerability data (CsvRow objects).
 * @returns Markdown formatted string.
 */
export declare function generateMarkdown(data: CsvRow[]): string;
export { cleanCell, formatPurl };
