name: Container Scanning
description: 'A GitHub Action to scan a container image for security vulnerabilities that follows CZI Best Practices'
inputs:
  image_name:
    description: "name of the image being scanned"
    required: true
  image_uri:
    description: 'which image to scan'
    required: true
  comparison_image_uri:
    description: 'which image to compare against'
    required: false
  filter_min_severity:
    description: 'the minimum severity level to include in the filtered results. Options: "CRITICAL", "HIGH", "MEDIUM", "LOW".'
    required: false
    default: "MEDIUM"
  critical_threshold:
    description: 'number of critical vulnerabilities that will cause the action to fail'
    required: false
    default: "1"
  high_threshold:
    description: 'number of high vulnerabilities that will cause the action to fail'
    required: false
    default: "1"
  medium_threshold:
    description: 'number of medium vulnerabilities that will cause the action to fail'
    required: false
    default: "10"
  low_threshold:
    description: 'number of low vulnerabilities that will cause the action to fail'
    required: false
    default: "10"
  other_threshold:
    description: 'number of other vulnerabilities that will cause the action to fail'
    required: false
    default: "10"
  fail_on_vulnerabilities:
    description: 'whether to fail the action if vulnerabilities are found'
    required: false
    default: "true"
  filter_unfixed_vulnerabilities:
    description: 'whether to filter out vulnerabilities that have no fixed version specified'
    required: false
    default: "false"
  leave_pr_comments:
    description: 'whether to leave comments on the PR with the results of the scan'
    required: false
    default: "true"
outputs:
  vulnerability_threshold_exceeded:
    description: '1 if the vulnerability threshold was exceeded, 0 otherwise'
    value: ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}
  inspector_scan_results_markdown:
    description: 'path to the markdown file containing the Inspector scan results'
    value: ${{ steps.inspector.outputs.inspector_scan_results_markdown }}
runs:
  using: "composite"
  steps:
    - uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::871040364337:role/ci/github-actions-inspector
        role-duration-seconds: 1800
        role-session-name: github-actions-inspector
    - name: Scan built image with Inspector
      uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
      id: inspector
      with:
        artifact_type: 'container'
        artifact_path: ${{ inputs.image_uri }} # make sure this matches the image you built
        critical_threshold: ${{ inputs.critical_threshold }}
        high_threshold:   ${{ inputs.high_threshold }}
        medium_threshold:   ${{ inputs.medium_threshold }}
        low_threshold:  ${{ inputs.low_threshold }}
        other_threshold: ${{ inputs.other_threshold }}
        display_vulnerability_findings: "disabled"
    - name: Run Comparison Scan if Needed
      if: inputs.comparison_image_uri != ''
      uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1.1.2
      id: comparison_inspector
      with:
        artifact_type: 'container'
        artifact_path: ${{ inputs.comparison_image_uri }}
        critical_threshold: ${{ inputs.critical_threshold }}
        high_threshold:   ${{ inputs.high_threshold }}
        medium_threshold:   ${{ inputs.medium_threshold }}
        low_threshold:  ${{ inputs.low_threshold }}
        other_threshold: ${{ inputs.other_threshold }}
        display_vulnerability_findings: "disabled"
    - name: Filter Inspector Scan Results
      id: filter
      uses: chanzuckerberg/github-actions/.github/actions/csv-vulnerability-filter@jlerner/comparative-scan
      with:
        primary_csv_path: ${{ steps.inspector.outputs.inspector_scan_results_csv }}
        comparison_csv_path: ${{ steps.comparison_inspector.outputs.inspector_scan_results_csv }}
        critical_threshold: ${{ inputs.critical_threshold }}
        high_threshold:   ${{ inputs.high_threshold }}
        medium_threshold:   ${{ inputs.medium_threshold }}
        low_threshold:  ${{ inputs.low_threshold }}
        other_threshold: ${{ inputs.other_threshold }}
        ignore_unpatched: ${{ inputs.filter_unfixed_vulnerabilities }}
        filter_min_severity: ${{ inputs.filter_min_severity }}
    - name: Display Inspector vulnerability scan results (markdown)
      shell: bash
      run: cat ${{ steps.filter.outputs.filtered_results_markdown }}
    - name: Fail job if vulnerability threshold is exceeded
      if: contains(inputs.fail_on_vulnerabilities, 'true')
      shell: bash
      run: exit ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}
    - name: Notify on vulnerabilities
      uses: actions/github-script@v7
      if: contains(inputs.leave_pr_comments, 'true') && steps.filter.outputs.vulnerability_threshold_exceeded == 1
      with:
        script: |
          let issueNumber;
          if (context.issue.number) {
            // use issue number from context if present
            issueNumber = context.issue.number;
          } else {
            // Otherwise use issue number from commit
            pullRequestsAssociatedWithCommit = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            if (pullRequestsAssociatedWithCommit.data.length > 0) {
              issueNumber = pullRequestsAssociatedWithCommit.data[0].number;
            }
          }
          if (!issueNumber) {
            core.warning('Could not find issue number');
            return;
          }

          // try to delete old comments about vulnerabilities
          const ownerAndRepo = '${{ github.repository }}';
          const [owner, repo] = ownerAndRepo.split('/');
          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: issueNumber,
          });
          const commentHeader = ':rotating_light: **Vulnerabilities found in ${{ inputs.image_name }} image**: ${{ steps.ecr_metadata.outputs.IMAGE_URI }} :rotating_light:';
          for (let comment of comments) {
            if (comment.body.includes(commentHeader) && comment.user.type === 'Bot') {
              console.log('Found comment to delete:', JSON.stringify(comment, null, 2));
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
          }

          // create a new comment with the vulnerability information
          const body = `
          ${commentHeader}
          Please review the vulnerabilities found in the image and take appropriate action:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          await github.rest.issues.createComment({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body,
          });
