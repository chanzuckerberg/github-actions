name: "Docker Build and Push"
description: "Will build and push a docker iamge."
inputs:
  dockerfile:
    description: "Path to the Dockerfile to be built."
    required: true
    default: "Dockerfile"
  context:
    description: "Path to the Docker build context."
    required: true
    default: "."
  name:
    description: "Name of the built docker image."
    required: true
  registry:
    description: "URI for your docker registry. Typically an ECR registry."
    required: true
  build_args:
    description: "A list of build arguments to pass to the docker build."
    required: false
  custom_tag:
    description: "Tag(s) to apply to the built image. If you supply a multi-line string, each line will be applied as a tag."
    required: false
    default: ""
  secret-files:
    description: "A list of files to be copied into the build context."
    required: false
    default: ""
  platforms:
    description: "A list of target platforms for build (comma delimited)"
    required: false
  load:
    description: "Load the image into the Docker daemon"
    required: false
    default: "false"
outputs:
  tags:
    description: "The tags we built and pushed"
    value: ${{ steps.meta.outputs.tags }}
  json:
    description: "The tags JSON we built and pushed"
    value: ${{ steps.meta.outputs.json }}
runs:
  using: "composite"
  steps:
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: 533267185808.dkr.ecr.us-west-2.amazonaws.com
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        image: 533267185808.dkr.ecr.us-west-2.amazonaws.com/docker.io/central/tonistiigi/binfmt:latest
        cache-image: false
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=533267185808.dkr.ecr.us-west-2.amazonaws.com/docker.io/central/moby/buildkit:master
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.name }}
        tags: |
          type=ref,event=branch,prefix=branch-
          type=ref,event=pr,prefix=pr-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=sha,format=long,prefix=sha-
          ${{ inputs.custom_tag }}
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
    - name: Calculate Branch and Base Names
      id: refs
      uses: chanzuckerberg/github-actions/.github/actions/get-github-ref-names@get-github-ref-names-v1.4.0
    - name: Calculate all the release-please branches
      id: release-please-branches
      shell: bash
      run: |
        RELEASE_PLEASE_BRANCHES=$(git branch -a | grep "release-please" | cut -d "/" -f 3 | grep "^release-please")
        echo "${RELEASE_PLEASE_BRANCHES}" >> $GITHUB_OUTPUT
    - name: Calculate Cache-From
      id: cache-from
      uses: actions/github-script@v7
      with:
        env:
          RELEASE_PLEASE_BRANCHES: ${{ steps.release-please-branches.outputs.RELEASE_PLEASE_BRANCHES }}
        script: |
          let cacheFrom = [
            "${{ steps.refs.outputs.headRef }}",
            ...process.env.RELEASE_PLEASE_BRANCHES.split("\n").filter(Boolean)
          ].map(ref => ref.replaceAll(/[^a-zA-Z0-9-_\.]+/g, "-"))
            .map(ref => `type=registry,ref=${{ inputs.registry }}/${{ inputs.name }}:branch-${ref}`).join('\r\n');
          console.log(`Will use cached images from ${JSON.stringify(cacheFrom, null, 2)}`);
          core.setOutput("cacheFrom", cacheFrom);
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        push: true
        load: ${{ inputs.load }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ steps.cache-from.outputs.cacheFrom }}
        cache-to: |
          type=inline,mode=max
        build-args: |
          ${{ inputs.build_args }}
          --progress=plain
        secret-files: ${{ inputs.secret-files }}
        platforms: ${{ inputs.platforms }}
