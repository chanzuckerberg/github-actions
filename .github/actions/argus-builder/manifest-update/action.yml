name: argus-docker-manifest-update
description: Updates manifests for Argus after the Docker image is built

inputs:
  envs:
    description: Env names, comma delimited
    required: true
  image_tag:
    description: The tag of the image that should be updated
    required: true
  images:
    description: JSON string array of processed images, output from argus-builder/build-prep
    required: true
  should_deploy:
    description: Whether or not the image tag should be written to the manifest and committed back to the PR
    required: true
  build_results:
    description: Outputs from build jobs indicating their status, comma delimited
    required: true
  github_app_id:
    description: 'GitHub App ID'
    required: true
  github_private_key:
    description: 'GitHub App private key'
    required: true

runs:
  using: composite
  steps:
    - name: Generate token
      uses: actions/create-github-app-token@v1
      id: generate_token
      with:
        app-id: ${{ inputs.github_app_id }}
        private-key: ${{ inputs.github_private_key }}

    - name: Get GitHub App User ID
      id: get-user-id
      shell: bash
      run: echo "user-id=$(gh api "/users/${{ steps.generate_token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
    - shell: bash
      run: |
        git config --global user.name '${{ steps.generate_token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate_token.outputs.app-slug }}[bot]@users.noreply.github.com'

    - name: Determine checkout ref
      id: ref
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const eventName = context.eventName;
          if (eventName === "pull_request") {
            // use PR head branch name if triggered by PR
            return context.payload.pull_request.head.ref;
          } else if (eventName === "push") {
            // return empty string if triggered by push, this is to ensure the checkout action uses the
            // default behavior which will prevent race condition commits from multiple builders triggered back-to-back
            return '';
          } else {
            core.setFailed(`EventName ${eventName} not supported`);
            return;
          }
    - uses: actions/checkout@v4
      with:
        persist-credentials: true # creds used in Update Argus Manifest step
        fetch-depth: 0
        token: ${{ steps.generate_token.outputs.token }}
        ref: ${{ steps.ref.outputs.result }}

    - uses: chanzuckerberg/github-actions/.github/actions/argus-builder/manifest-update/node-action@v6
      with:
          should_deploy: ${{ inputs.should_deploy }}
          images: ${{ inputs.images }}
          image_tag: ${{ inputs.image_tag }}
          build_results: ${{ inputs.build_results }}
          envs: ${{ inputs.envs }}
