name: argus-docker-build
description: Build a Docker Image for Argus

inputs:
  image_name:
    description: "Name of the image to build"
    required: true
  dockerfile:
    description: "Path to the Dockerfile"
    required: true
  context:
    description: "Path to the build context"
    required: true
  platform:
    description: "Platform to build for"
    required: false
    default: "linux/arm64"
  build_args:
    description: "Args for docker build"
    required: false
    default: ""
  secret_files:
    description: "Files to copy into the build context"
    required: false
    default: ""
  image_tag:
    description: "Additional tag to apply to the image this is built"
    required: true
  github_app_id:
    description: "GitHub App ID"
    required: true
  github_private_key:
    description: "GitHub App private key"
    required: true
  clean_checkout:
    description: "Whether to clean the repository before checking out"
    required: false
    default: "false"
  fail_on_vulnerabilities:
    description: "whether to fail the action if vulnerabilities are found"
    required: false
    default: "true"
  enable_vuln_container_scan:
    description: "Opt in to scan containers with AWS inspector"
    required: false
    default: "false"

outputs:
  image_uri:
    description: "URI of the image that was built"
    value: ${{ steps.ecr_metadata.outputs.IMAGE_URI }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        clean: ${{ inputs.clean_checkout }}
        fetch-depth: 0
        path: ${{ github.event.repository.name }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::533267185808:role/gh_actions_core_platform_infra_prod_eks
        role-session-name: ArgusContainerBuilder
    - name: Generate token
      uses: actions/create-github-app-token@v2
      id: generate_token
      with:
        app-id: ${{ inputs.github_app_id }}
        private-key: ${{ inputs.github_private_key }}
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: chanzuckerberg/argus-artifacts
        path: argus-artifacts
        token: ${{ steps.generate_token.outputs.token }}
    - name: ECR Metadata
      id: ecr_metadata
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const ECR_REGISTRY = "533267185808.dkr.ecr.us-west-2.amazonaws.com";
          const ECR_REPO_NAME = path.join(
            'core-platform',
            '${{ github.event.repository.name }}',
            '${{ inputs.context }}',
            '${{ inputs.image_name }}',
          );

          // inputs.image_tag can be a multi-line string so we split on newlines and take the first non-empty line
          const inputTagLines = `${{ inputs.image_tag }}`.split('\n').map(line => line.trim()).filter(line => line.length > 0);
          if (inputTagLines.length === 0) {
            throw new Error("inputs.image_tag must contain at least one non-empty line");
          }
          if (inputTagLines.length > 1) {
            console.warn(`inputs.image_tag contains multiple non-empty lines, using the first one: ${inputTagLines[0]}`);
          }

          const IMAGE_URI = `${ECR_REGISTRY}/${ECR_REPO_NAME}:${inputTagLines[0]}`;

          core.setOutput('ECR_REGISTRY', ECR_REGISTRY);
          core.setOutput('ECR_REPO_NAME', ECR_REPO_NAME);
          core.setOutput('IMAGE_URI', IMAGE_URI);
    - name: Create ECR repo if necessary
      id: create_ecr_repo
      uses: int128/create-ecr-repository-action@v1
      with:
        repository: ${{ steps.ecr_metadata.outputs.ECR_REPO_NAME }}
        lifecycle-policy: argus-artifacts/settings/ecr/lifecycle-policy.json
        repository-policy: argus-artifacts/settings/ecr/repository-policy.json
    - name: Build And Push
      uses: chanzuckerberg/github-actions/.github/actions/docker-build-push@heathj/experiment
      with:
        dockerfile: ${{ github.event.repository.name }}/${{ inputs.dockerfile }}
        context: ${{ github.event.repository.name }}/${{ inputs.context }}
        name: ${{ steps.ecr_metadata.outputs.ECR_REPO_NAME }}
        registry: ${{ steps.ecr_metadata.outputs.ECR_REGISTRY }}
        custom_tag: ${{ inputs.image_tag }}
        platforms: ${{ inputs.platform }}
        build_args: |
          IMAGE_TAG=${{ inputs.image_tag }}
          ${{ inputs.build_args }}
        secret-files: ${{ inputs.secret_files }}
        load: ${{ inputs.enable_vuln_container_scan }}
    - name: Scan for vulnerabilities
      if: ${{ inputs.enable_vuln_container_scan == 'true' }}
      uses: chanzuckerberg/github-actions/.github/actions/container-scanning@v6
      id: scan
      with:
        image_name: ${{ inputs.image_name }}
        image_uri: ${{ steps.ecr_metadata.outputs.IMAGE_URI }}
        fail_on_vulnerabilities: ${{ inputs.fail_on_vulnerabilities }}
