name: argus-docker-build-prep
description: Prepare for building a Docker Image for Argus

inputs:
  path_filters:
    description: 'Glob patterns to match against changed files in the repository, comma delimited'
    required: false
    default: '**/*'
  path_filters_base:
    description: |
      Git reference (e.g. branch name) against which the changes will be detected. Defaults to the current branch.
      If it references same branch it was pushed to, changes are detected against the most recent commit before the push.
      This option is ignored if action is triggered by pull_request event.
    required: false
    default: ${{ github.ref }}
  branches:
    description: 'Branch names to run this job on, supports wildcards, comma delimited'
    required: false
    default: '*'
  branches_ignore:
    description: 'Branch names to run this job on, supports wildcards, comma delimited'
    required: false
    default: ''

outputs:
  image_tag:
    description: A custom tag to apply to the images that are built
    value: ${{ steps.build_tags.outputs.IMAGE_TAG }}
  should_build:
    description: Whether the job should run
    value: ${{ steps.final_check.outputs.should_build }}
  base:
    description: The base branch or commit to compare against
    value: ${{ steps.force_push.outputs.base }}

runs:
  using: composite
  steps:
    - name: Check for matching branch
      id: branch_filter
      uses: actions/github-script@v7
      with:
        script: |
          function wildcardMatch(text, pattern) {
            const regexPattern =
            new RegExp('^' + pattern.replace(/\?/g, '.').replace(/\*/g, '.*') + '$');
            return regexPattern.test(text);
          }

          const branches = `${{ inputs.branches }}`.split(',').map(b => b.trim()).filter(b => b.length > 0);
          console.log('Branches to run against:', branches);

          const branchesIgnore = `${{ inputs.branches_ignore }}`.split(',').map(b => b.trim()).filter(b => b.length > 0);
          console.log('Branches to ignore:', branchesIgnore);

          const branch = `${{ github.ref }}`.replace('refs/heads/', '');
          const shouldRun = branches.some(b => wildcardMatch(branch, b)) && !branchesIgnore.some(b => wildcardMatch(branch, b));

          if (shouldRun) {
            console.log('Job will run');
          } else {
            console.log(`Job will be skipped because branch name "${branch}" does not match the filters`);
          }

          core.setOutput('match', shouldRun);

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get build tag
      id: build_tags
      shell: bash
      run: |
        echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Validate build tag
      uses: actions/github-script@v7
      with:
        script: |
          const imageTag = `${{ steps.build_tags.outputs.IMAGE_TAG }}`;
          if (imageTag === '' || imageTag === 'sha-') {
            core.setFailed('The image tag [${imageTag}] is invalid.');
          }

    - name: Parse inputs
      id: parse_filters
      uses: actions/github-script@v7
      with:
        script: |
          const filters = `${{ inputs.path_filters }}`.split(',').map(f => f.trim()).filter(b => b.length > 0);
          const filtersStr = "run_on:\n" + filters.map(f => `  - '${f}'`).join('\n');
          core.setOutput('filters', filtersStr);

    - name: Check for force push
      id: force_push
      uses: actions/github-script@v7
      with:
        # if the push was forced, use the default branch as the base -- otherwise, use the most recent commit before the push
        # this is necessary because when you force push the previous commit is not available in the repo, thus no changes can be detected
        script: |
          if (`${{ github.event_name }}` === 'push' && ${{ github.event.forced }}) {
            core.info(`Force push detected, using the repo's default branch (${{ github.event.repository.default_branch }}) as the base`)
            core.setOutput('base', `${{ github.event.repository.default_branch }}`);
          } else {
            core.info(`Push was not forced, using the most recent commit before the push as the base`)
            core.setOutput('base', `${{ inputs.path_filters_base }}`);
          }

    - name: Check for matching file changes
      uses: dorny/paths-filter@v3
      id: file_filter
      with:
        filters: |
          ${{ steps.parse_filters.outputs.filters }}
        base: ${{ steps.force_push.outputs.base }}
        list-files: json

    - name: Check if build should run
      id: final_check
      uses: actions/github-script@v7
      with:
        script: |
          const branchMatched = `${{ steps.branch_filter.outputs.match }}` === 'true';
          const filesMatched = `${{ steps.file_filter.outputs.run_on }}` === 'true';
          core.setOutput('should_build', filesMatched && branchMatched);
