name: Happy Cleanup
description: Will list happy stacks in an environment and delete those that have not been updated in a while.
inputs:
  env:
    description: The environment in which to delete stacks
    required: true
    default: rdev
  all:
    description: include every stack in the environment 
    required: false 
    default: false 
  time:
    description: The longest period before a stack should be considered stale. Should be something like '2 weeks' or '1 day'
    required: true
    default: 2 weeks
  exclude:
    description: Exclude stacks with these substrings in the stackname
    required: false
  tfe_token:
    description: A Terraform Enterprise API token to be used with your happy organization
    required: true
  working_directory:
    description: "The happy project root"
    default: "."
    required: false
  happy_version:
    description: The version of happy to use
    required: true
    default: latest
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Install happy
      uses: chanzuckerberg/github-actions/.github/actions/install-happy@main
      with:
        happy_version: ${{ inputs.happy_version }}
    - name: Get Id Token
      uses: actions/github-script@v6
      id: idtoken
      with:
        script: |
          const id_token = await core.getIDToken()
          core.setOutput('id_token', id_token)
          core.exportVariable('id_token', id_token);
    - name: Delete stale stacks
      working-directory: ${{ inputs.working_directory }}
      env:
        ENV: ${{ inputs.env }}        
        TFE_TOKEN: ${{ inputs.tfe_token }}
        TIME: ${{inputs.time}}
        EXCLUDE: ${{ inputs.exclude }}
        ALL: ${{ inputs.all}}
        HAPPY_OIDC_ID_TOKEN: ${{steps.idtoken.outputs.id_token}}
      shell: bash
      run: |
        set -ue
        set -o pipefail

        date=`date +%Y-%m-%d'T'%H:%M'Z' -d "$TIME ago"`
        list=("happy" "list" "--aws-profile" "" "--output" "json" "--env" "$ENV")
        force=""
        if [[ ${ALL} ]]; then
          list=("happy" "list" "--aws-profile" "" "--output" "json" "--env" "$ENV")
          force="--force"
        fi
        if [[ ! -z ${EXCLUDE} ]]; then
          for i in $("${list[@]}" | jq -r --arg date "$date" --arg exclude "$EXCLUDE" '.[] | select(.last_updated < $date) | select(any(.stack; contains($exclude))|not) | .stack'); do
            echo "Deleting stack: $i"
            happy delete --aws-profile "" $i --env $ENV "$force"
          done
          exit
        fi
        for i in $("${list[@]}" | jq -r --arg date "$date" '.[] | select(.last_updated < $date) | .stack'); do
          echo "Deleting stack: $i"
          happy delete --aws-profile "" $i --env $ENV "$force"
        done
