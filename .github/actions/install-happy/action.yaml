name: Downloads and installs Happy CLI
description: Will download and install Happy CLI.
inputs:
  happy_version:
    description: Version of happy CLI to fetch
    required: true
    default: latest
  gh_cli_version:
    description: The version of GH cli to use
    required: false
    default: 2.30.0
  gh_token:
    description: The GH token to authenticate the gh CLI with
    required: false
    default: ${{ github.token }}
  install_globally:
    description: Whether to add happy to the system bin directory
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Install gh CLI
      shell: bash
      env:
        VERSION: ${{ inputs.gh_cli_version }}
        GH_TOKEN_TMP: ${{ inputs.gh_token }}
        INSTALL_SYSTEMWIDE: ${{ inputs.install_globally }}
      run: |
        set -ue
        set -o pipefail
        AMD_URL="https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_linux_amd64.tar.gz"
        ARM_URL="https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_linux_arm64.tar.gz"
        PLATFORM=$(uname -m)
        if [[ $PLATFORM == "arm64" ]]; then
            URL=$ARM_URL
        elif [[ $PLATFORM == "aarch64" ]]; then
            URL=$ARM_URL
        else
            URL=$AMD_URL
        fi
        GHCLI_TOOL_PATH="/tmp/ghcli"
        mkdir -p $GHCLI_TOOL_PATH
        cd /tmp/
        curl $URL -L -v -o ghcli.tar.gz 
        tar -xf ghcli.tar.gz -C $GHCLI_TOOL_PATH --strip-components 1
        echo "${GHCLI_TOOL_PATH}/bin" >> "${GITHUB_PATH}"
        if [ -n "${INSTALL_SYSTEMWIDE}" ]; then
            cp ${GHCLI_TOOL_PATH}/bin/gh /usr/local/bin/
        fi

        ${GHCLI_TOOL_PATH}/bin/gh auth login --with-token < <(echo $GH_TOKEN_TMP)
        ${GHCLI_TOOL_PATH}/bin/gh auth status
    - name: Install terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    - name: Install AWS CLI v2
      shell: bash
      run:  |
        set -ue
        set -o pipefail
        AMD_CMD="curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip -v"
        ARM_CMD="curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o /tmp/awscliv2.zip -v"
        PLATFORM=$(uname -m)
        if [[ $PLATFORM == "arm64" ]]; then
            $($ARM_CMD)
        elif [[ $PLATFORM == "aarch64" ]]; then
            $($ARM_CMD)
        else
            $($AMD_CMD)
        fi
        unzip -q /tmp/awscliv2.zip -d /tmp
        rm /tmp/awscliv2.zip
        sudo /tmp/aws/install --update
        rm -rf /tmp/aws/

    - name: Determine sun platform
      shell: bash
      run: |
        set -ue
        set -o pipefail
        PLATFORM=$(uname -m)
        if [[ $PLATFORM == "arm64" ]]; then
            echo "PLATFORM=linux_arm64" >> $GITHUB_ENV
        elif [[ $PLATFORM == "aarch64" ]]; then
            echo "PLATFORM=linux_arm64" >> $GITHUB_ENV
        else
            echo "PLATFORM=linux_amd64" >> $GITHUB_ENV
        fi

    - name: Determine happy version to use
      id: determineHappyCliVersion
      uses: actions/github-script@v6
      env:
        HAPPY_VERSION: ${{ inputs.happy_version }}
      with:
        script: |
          console.log(`HAPPY_VERSION=${process.env.HAPPY_VERSION}`);
          console.log(`PLATFORM=${process.env.PLATFORM}`);

          let latestHappyCli = undefined;
          if (process.env.HAPPY_VERSION && process.env.HAPPY_VERSION !== 'latest') {
            console.log(`Using happy version ${process.env.HAPPY_VERSION} from input instead of checking for latest version...`);
            latestHappyCli = process.env.HAPPY_VERSION;
          } else {
            let page = 1;
            while (!latestHappyCli) {
              const releases = await github.rest.repos.listReleases({
                owner: 'chanzuckerberg',
                repo: 'happy',
                per_page: 100,
                page,
              });
              console.log(`Releases for page=${page}:`, releases.data)
              const latestRelease = releases.data.find(release => {
                if (!release.tag_name.match(/^v[0-9]+\.[0-9]+\.[0-9]+$/)) {
                  return false;
                }
                const version = release.tag_name.replace(/^v/, '');
                console.log(`Found candidate release version=${version}. Checking for assets...`);
                return release.assets.find(asset => asset.name === `happy_${version}_checksums.txt`);
              });
              if (latestRelease) {
                latestHappyCli = latestRelease.tag_name.replace(/^v/, '');
              }
              page += 1;
            }
            console.log('Latest happy CLI version:', latestHappyCli)
          }
          return latestHappyCli

    - name: Print releases
      shell: bash
      run: |
        echo "Releases: ${{ steps.determineHappyCliVersion.outputs.result }}"

    - name: Install happy
      shell: bash
      env:
        HAPPY_VERSION: ${{ inputs.happy_version }}
        INSTALL_SYSTEMWIDE: ${{ inputs.install_globally }}
        GH_TOKEN: ${{ github.token }}
      # TODO: cache as in:
      #       https://docs.github.com/en/actions/creating-actions/developing-a-third-party-cli-action
      run: |
        set -ue
        set -o pipefail
        cd $(mktemp -d)
        echo Input argument indicated to use Happy version: $HAPPY_VERSION
        if [ -z $HAPPY_VERSION ] || [ $HAPPY_VERSION == "latest" ]
        then
          HAPPY_VERSION=$(gh api -H "Accept: application/vnd.github.v3+json" /repos/chanzuckerberg/happy/releases --paginate -q "[.[] | select(.tag_name | startswith(\"cli-v\")) | .tag_name][0]" | sed -e "s/^[a-z\-]*v//" | head -n 1)
        fi
        PLATFORM=$(uname -m)
        echo Installing Happy version: $HAPPY_VERSION
        echo Installing Happy platform: $PLATFORM
        ARM_CMD="wget --quiet https://github.com/chanzuckerberg/happy/releases/download/v${HAPPY_VERSION}/happy_${HAPPY_VERSION}_linux_arm64.tar.gz -O happy.tar.gz"
        AMD_CMD="wget --quiet https://github.com/chanzuckerberg/happy/releases/download/v${HAPPY_VERSION}/happy_${HAPPY_VERSION}_linux_amd64.tar.gz -O happy.tar.gz"
        if [[ $PLATFORM == "arm64" ]]; then
            $($ARM_CMD)
        elif [[ $PLATFORM == "aarch64" ]]; then
            $($ARM_CMD)
        else
            $($AMD_CMD)
        fi
        tar -xf happy.tar.gz
        echo "${PWD}" >> "${GITHUB_PATH}"
        if [ -n "${INSTALL_SYSTEMWIDE}" ]; then
            cp happy /usr/local/bin/
        fi
