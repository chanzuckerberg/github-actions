name: Create or Update a Happy Stack
description: "Will create, update, or delete a Happy Stack"
inputs:
  operation:
    description: "Operation we want this to perform. If not provided, happy will automatically create or update the stack with given name. Could be set to delete to delete the stack."
    default: "create-or-update"
    required: false
  stack-name:
    description: "Name of the stack to create, update, or delete"
    required: true
  create-tag:
    description: "Should we build and tag docker images. Defaults to false and assumes images already exist."
    default: "false"
    required: false
  tag:
    description: "Specify the tag for the docker images. If not specified we will generate a default tag."
    default: ""
    required: false
  tfe-token:
    description: "TFE Token"
    required: true
  happy-version:
    description: "Version of happy CLI to fetch"
    required: false
    default: "latest"
  version-lock-file:
    description: "Lock file to utilize for happy version"
    required: false
  env:
    description: "The environment to update or create"
    required: false
  env-file:
    description: "Specify a docker env file to use when deploying"
    required: false
  docker-compose-config-path:
    description: "Specify a docker compose config path"
    required: false
  skip-migrations:
    description: "Specify true to skip migrations"
    default: "false"
    required: false
  working-directory:
    description: "The happy project root"
    default: "."
    required: false
  image-source-env:
    description: "Optional environment to pull images from rather than building them (i.e. a staging environment to promote from)"
    required: false
    default: ""
  image-source-stack:
    description: "Optional stack to pull images from rather than building them (i.e. should be used with image_source_env)"
    required: false
    default: ""
  image-source-role-arn:
    description: "Optional role-arn to pull images from rather than building them (i.e. should be used with image_source_env and image_source_stack)"
    required: false
    default: ""
  repository:
    description: "Github repo to deploy"
    required: false
  github-token:
    description: "Github token to use for checkout"
    required: false
  github-repo-branch:
    description: "Branch of Github repo to deploy"
    required: false
  slice:
    description: "Slice to deploy"
    required: false
  slice-default-tag:
    description: "For stacks using slices, override the default tag for any images that aren't being built and pushed"
    required: false
    default: "latest"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
          repository: ${{ inputs.repository || github.repository }}
          ref: ${{ inputs.github-repo-branch || github.event.pull_request && github.head_ref || github.ref_name }}
          token: ${{ inputs.github-token || github.token }}
    - name: Install happy
      uses: chanzuckerberg/github-actions/.github/actions/install-happy@main
      with:
        happy_version: ${{ inputs.happy-version }}
        version_lock_file: ${{ inputs.version-lock-file }}
    - name: Create or update happy stack
      env:
        TFE_TOKEN: ${{ inputs.tfe-token }}
        STACK_NAME: ${{ inputs.stack-name }}
        CREATE_TAG: ${{ inputs.create-tag }}
        TAG: ${{ inputs.tag }}
        ENV: ${{ inputs.env }}
        ENV_FILE: ${{ inputs.env-file }}
        DOCKER_COMPOSE_CONFIG_PATH: ${{ inputs.docker-compose-config-path }}
        OPERATION: ${{ inputs.operation }}
        SKIP_MIGRATIONS: ${{ inputs.skip-migrations }}
        IMAGE_SOURCE_ENV: ${{ inputs.image-source-env }}
        IMAGE_SOURCE_STACK: ${{ inputs.image-source-stack }}
        IMAGE_SOURCE_ROLE_ARN: ${{ inputs.image-source-role-arn }}
        SLICE: ${{ inputs.slice }}
        SLICE_DEFAULT_TAG: ${{ inputs.slice-default-tag }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -ue
        set -o pipefail

        IMAGE_TAG="${TAG:-sha-$GITHUB_SHA}"
        echo "Targetting Stack ${STACK_NAME}, tagging with '${IMAGE_TAG}'"
        HAPPY_DEPLOYMENT_FLAGS=""
        if [[ ${OPERATION} == "create-or-update" ]]; then
          OPERATION="update"
          HAPPY_DEPLOYMENT_FLAGS="--force"
        fi

        if [[ ${OPERATION} == "update" || ${OPERATION} == "create" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="${HAPPY_DEPLOYMENT_FLAGS} --create-tag=${CREATE_TAG} --tag ${IMAGE_TAG} --docker-compose-env-file=${ENV_FILE}"
        fi

        if [[ ! -z ${DOCKER_COMPOSE_CONFIG_PATH} ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --docker-compose-config-path=${DOCKER_COMPOSE_CONFIG_PATH}"
        fi

        if [[ ${SKIP_MIGRATIONS} == "true" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --skip-migrations"
        fi

        if [[ ${IMAGE_SOURCE_ENV} != "" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --image-src-env ${IMAGE_SOURCE_ENV}"
        fi

        if [[ ${IMAGE_SOURCE_STACK} != "" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --image-src-stack ${IMAGE_SOURCE_STACK}"
        fi

        if [[ ${IMAGE_SOURCE_ROLE_ARN} != "" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --image-src-role-arn ${IMAGE_SOURCE_ROLE_ARN}"
        fi

        if [[ ${SLICE} != "" ]]; then
          HAPPY_DEPLOYMENT_FLAGS="$HAPPY_DEPLOYMENT_FLAGS --slice ${SLICE} --slice-default-tag ${SLICE_DEFAULT_TAG}"
        fi

        echo "Starting to ${OPERATION} stack ${STACK_NAME} with additional flags: ${HAPPY_DEPLOYMENT_FLAGS}"
        echo "Running: '${OPERATION} --aws-profile "" --env=${ENV} ${HAPPY_DEPLOYMENT_FLAGS} ${STACK_NAME}'"
        happy ${OPERATION} --aws-profile "" --env=${ENV} ${HAPPY_DEPLOYMENT_FLAGS} ${STACK_NAME}
