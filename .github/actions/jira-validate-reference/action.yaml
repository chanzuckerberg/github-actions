name: Validate Jira Reference
description: |
  Finds the jira issue reference in the branch name, PR title, or PR body and
  validates it against the Jira API. If the reference is not found, the action
  will fail. If the reference is found, the action will add a Jira summary to
  the PR body (or update the existing summary if it already exists).

inputs:
  projectKey:
    description: The Jira project keys to look for (comma delimited)
    required: true
    type: string
  skipBranches:
    description: Regex of branch names to skip
    required: true
    type: string
    default: '^(dependabot\/.*|release-please--branches--main)$'
  jiraToken:
    description: Jira token
    required: true
    type: string
  jiraBaseUrl:
    description: 'The Jira Base URL'
    required: false
    type: string
    default: 'https://czi.atlassian.net'

runs:
  using: composite
  steps:
    - name: Check If Job Should Run
      id: checkIfJobShouldRun
      uses: actions/github-script@v7
      env:
        HEADREF: ${{ github.head_ref }}
      with:
        script: |
          const skipBranchesRegex = new RegExp('${{ inputs.skipBranches }}');
          const shouldRun = '$HEADREF'.match(skipBranchesRegex) == null;
          if (shouldRun) {
            console.log('Job will run');
          } else {
            console.log('Job will be skipped because branch name matches skip regex');
          }
          return shouldRun;

    - name: Get Pull Request
      id: getPullRequest
      if: steps.checkIfJobShouldRun.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const ownerAndRepo = '${{ github.repository }}';
          const [owner, repo] = ownerAndRepo.split('/');
          const issueResult = await github.rest.issues.get({
            owner,
            repo,
            issue_number: ${{ github.event.pull_request.number }},
          });
          const pullRequest = issueResult.data;
          console.log(`Got pull request #${pullRequest.number}: ${JSON.stringify(pullRequest, null, 2)}`);
          core.setOutput('prBody', JSON.stringify(pullRequest.body));
          core.setOutput('prTitle', JSON.stringify(pullRequest.title));

    - name: Parse Jira Issue Reference
      id: parseIssueRef
      if: steps.checkIfJobShouldRun.outputs.result == 'true'
      uses: actions/github-script@v7
      env:
        HEADREF: ${{ github.head_ref }}
        PRBODY: ${{ steps.getPullRequest.outputs.prBody }}
        PRTITLE: ${{ steps.getPullRequest.outputs.prTitle }}
      with:
        script: |
          const prBody = "$PRBODY";
          const prTitle = "$PRTITLE";

          let jiraIssueRef = null;
          const issueRegex = new RegExp(`${{ inputs.projectKey }}-\\d+`);
          [
            { label: 'branch', value: "$HEADREF" },
            { label: 'title', value: prTitle },
            { label: 'body', value: prBody },
          ].find(({label, value}) => {
            const match = value.match(issueRegex);
            if (match) {
              jiraIssueRef = match[0];
              console.log(`Found Jira issue reference in PR ${label}: ${jiraIssueRef}`);
              return true;
            }
            return false;
          });

          const ownerAndRepo = '${{ github.repository }}';
          const [owner, repo] = ownerAndRepo.split('/');
          const noJiraIssueBody = `No Jira issue reference found in branch, title, or body of PR.\n\nPlease add a reference to a Jira issue in the form of ${{ inputs.projectKey }}-#### (eg: ${{ inputs.projectKey }}-1234) to the branch name, title, or body of your PR.`;

          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: ${{ github.event.pull_request.number }},
          })

          for (let comment of comments) {
            if (comment.body === noJiraIssueBody && comment.user.type === 'Bot') {
              console.log('Found comment to delete:', JSON.stringify(comment, null, 2));
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
          }

          if (!jiraIssueRef) {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: noJiraIssueBody,
            });
            throw new Error(noJiraIssueBody);
          }
          return jiraIssueRef;

    - name: Fetch Jira Issue Details
      id: fetchJiraIssueDetails
      if: steps.checkIfJobShouldRun.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const jiraIssueRef = ${{ steps.parseIssueRef.outputs.result }};
          const response = await fetch(
            `${{ inputs.jiraBaseUrl }}/rest/api/3/issue/${jiraIssueRef}?fields=summary,issuetype,status`,
            {
              headers: {
                Authorization: `Basic ${{ inputs.jiraToken }}`
              },
            }
          );
          const responseJson = await response.json();
          if (response.status !== 200) {
            throw new Error(`Failed to fetch Jira issue details for ${jiraIssueRef}: ${responseJson.errorMessages.join(', ')}`);
          }
          return responseJson;

    - name: Find Jira Marker
      id: findJiraMarker
      if: steps.checkIfJobShouldRun.outputs.result == 'true'
      uses: chanzuckerberg/github-actions/.github/actions/jira-find-marker@a9fcc1eebdf68758ed741a0828e1c822a3b3177e
      with:
        pullRequestBody: ${{ steps.getPullRequest.outputs.prBody }}
        projectKey: ${{ inputs.projectKey }}

    - name: Update PR Body
      uses: actions/github-script@v7
      if: steps.checkIfJobShouldRun.outputs.result == 'true'
      with:
        script: |
          function getJiraIssueDetails(jiraIssueRef, jiraIssueDetails) {
            return `<!--JIRA_VALIDATE_START:${jiraIssueRef}:do not remove this marker as it will break the jira validation functionality-->
          <details open>
            <summary><a href="${{ inputs.jiraBaseUrl }}/browse/${jiraIssueRef}" title="${jiraIssueRef}" target="_blank">${jiraIssueRef}</a></summary>
            <br />
            <table>
              <tr>
                <th>Summary</th>
            <td>${jiraIssueDetails.fields.summary}</td>
              </tr>
              <tr>
                <th>Type</th>
                <td>
                  <img alt="${jiraIssueDetails.fields.issuetype.name}" src="${jiraIssueDetails.fields.issuetype.iconUrl}" />
                  ${jiraIssueDetails.fields.issuetype.name}
                </td>
              </tr>
              <tr>
                <th>Status</th>
                <td>${jiraIssueDetails.fields.status.name}</td>
              </tr>
            </table>
          </details>
          <!--JIRA_VALIDATE_END:do not remove this marker as it will break the jira validation functionality-->

          ---

          `;
          }

          const jiraIssueRef = ${{ steps.parseIssueRef.outputs.result }};
          const jiraIssueDetails = ${{ steps.fetchJiraIssueDetails.outputs.result }};
          const jiraIssueMarker = getJiraIssueDetails(jiraIssueRef, jiraIssueDetails);

          let body = ${{ steps.getPullRequest.outputs.prBody }};

          const existingJiraIssueMarker = unescape(`${{ steps.findJiraMarker.outputs.jiraIssueMarker }}`);
          if (existingJiraIssueMarker) {
            console.log('Found existing Jira issue marker, replacing it with the new one');
            body = body.replace(existingJiraIssueMarker, jiraIssueMarker);
          } else {
            console.log('No existing Jira issue marker found, adding a new one');
            body = jiraIssueMarker + body;
          }

          const [owner, repo] = '${{ github.repository }}'.split('/');
          const prNumber = ${{ github.event.pull_request.number }};
          github.rest.issues.update({
            owner,
            repo,
            issue_number: prNumber,
            body,
          });
